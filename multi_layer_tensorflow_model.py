import tensorflow as tf 


def build_model():
    inputs = tf.keras.layers.Input(shape = (96, 96, 1))

    x0 = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), padding='SAME', activation=tf.nn.relu)(inputs)
    x0 = tf.keras.layers.BatchNormalization(axis=-1)(x0)
    x0 = tf.keras.layers.MaxPooling2D((2, 2))(x0)
    print(x0.shape)
    x0 = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), padding='SAME', activation=tf.nn.relu)(x0)
    x0 = tf.keras.layers.BatchNormalization(axis=-1)(x0)
    x0 = tf.keras.layers.MaxPooling2D((2, 2))(x0)
    print(x0.shape)
    x0 = tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), padding='SAME', activation=tf.nn.relu)(x0)
    x0 = tf.keras.layers.BatchNormalization(axis=-1)(x0)
    x0 = tf.keras.layers.MaxPooling2D((2, 2))(x0)
    print(x0.shape)
    x0 = tf.keras.layers.Conv2D(filters=256, kernel_size=(3, 3), padding='SAME', activation=tf.nn.relu)(x0)
    x0 = tf.keras.layers.BatchNormalization(axis=-1)(x0)
    x0 = tf.keras.layers.MaxPooling2D((2, 2))(x0)
    print(x0.shape)
    x0 = tf.keras.layers.Dropout(rate=0.5)(x0)
    print(x0.shape)
    x0 = tf.keras.layers.Flatten()(x0)
    print(x0.shape)
    x = tf.keras.layers.Dense(1024, activation = tf.nn.relu)(x0)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Dense(512, activation = tf.nn.relu)(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Dense(256, activation = tf.nn.relu)(x)
    x = tf.keras.layers.BatchNormalization()(x)
    x = tf.keras.layers.Dropout(rate=0.5)(x)
    head_root = tf.keras.layers.Dense(168, activation = tf.nn.softmax,name="grapheme_output")(x)
    
    x1 = tf.keras.layers.Dense(1024, activation = tf.nn.relu)(x0)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dense(512, activation = tf.nn.relu)(x1)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dense(256, activation = tf.nn.relu)(x1)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dense(128, activation = tf.nn.relu)(x1)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dense(64, activation = tf.nn.relu)(x1)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dense(32, activation = tf.nn.relu)(x1)
    x1 = tf.keras.layers.BatchNormalization()(x1)
    x1 = tf.keras.layers.Dropout(rate=0.5)(x1)
    head_vowel = tf.keras.layers.Dense(11, activation = tf.nn.softmax,name="vowel_output")(x1)
    
    x2 = tf.keras.layers.Dense(1024, activation = tf.nn.relu)(x0)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dense(512, activation = tf.nn.relu)(x2)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dense(256, activation = tf.nn.relu)(x2)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dense(128, activation = tf.nn.relu)(x2)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dense(64, activation = tf.nn.relu)(x2)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dense(32, activation = tf.nn.relu)(x2)
    x2 = tf.keras.layers.BatchNormalization()(x2)
    x2 = tf.keras.layers.Dropout(rate=0.5)(x2)
    head_consonant = tf.keras.layers.Dense(7, activation = tf.nn.softmax,name="consonant_output")(x2)

    model = tf.keras.models.Model(inputs=inputs, outputs=[head_root, head_vowel, head_consonant])
    return model


model = build_model()
print(model.summary())
